# Aula 02- Tipagem em Arrays, Objetos e Fun√ß√µes em TypeScript:

## üìå Conte√∫do da aula:
1. **Exercic√≠o de fixa√ß√£o da aula 01**  
2. **O que s√£o arrays/arrays em Typsecript**  
3. **Tuplas em Typescript**  
4. **Exercic√≠o para praticarmos a sintaxe de listas: **  
5. **Objetos em Javascript.**  
6. **Interfaces TypeScript**

---

## üîπ Exercic√≠o Fixa√ß√£o da aula 01: 
#Conserte a fun√ß√£o e retorne ela no console:
```javascript
function normalizarTexto(texto){
	return texto.trims().toLowercase();
}
```

##Crie uma fun√ß√£o chamada apresentarPessoa que:

1. receba os tr√™s par√¢metros acima (com os tipos corretos)
2. retorne uma string formatada, por exemplo:"Ol√°, meu nome √© Lucas, tenho 25 anos e sou aluno: true"


## üîπ Arrays em TS:

Como todos sabem, arrays s√£o estruturas de dados para que sejam armazenadas diversas informa√ß√µes, sejam elas n√∫mericas, strings, 
booleanas e etc. No TypeScript, n√≥s podemos tipar os dados que iremos receber nesses arrays, como por exemplo, um array somente de strings ou de n√∫meros:

```javascript
#Esse √© o modo mais utilizado de tipagem de array em TypeScript:
const listaNomes: string[] = ['Lucas', 'Paulo', 'Pedro', 'etc']
const listaNumeros: number[] = [25, 20, 18, 15]
const listaAtivos: boolean[] = [true, false, true, false]

#Temos tamb√©m uma outra forma de tipar esses Arrays que seria com a estrutura de Generics que iremos ver mais a frente nas demais aulas:
const listaNomes: Array<string> = ['Lucas', 'Paulo', 'Pedro', 'etc']
const listaNumeros: Array<number> = [25, 20, 18, 15]
const listaAtivos:Array<boolean> = [true, false, true, false]
```
Realizando a tipagem dessa maneira, n√≥s temos a seguran√ßa de que iremos receber somente um tipo de dados no array, evitando assim quebra de informa√ß√µes e facilitando a itera√ß√£o sobre cada um.
Configura√ß√£o:
## Tuplas em TS:
Falando tamb√©m sobre seguran√ßa de dados, no TypeScript n√≥s temos as Tuples, que s√£o arrays com tamanhos espec√≠ficos e posicionamento de tipos na ordem que desejamos,
elas possuem uma sintaxe parecida com arrays, mas com uma caracter√≠stica de seguran√ßa  bem bacana:

```javascript
const tuplaUsuarios: [string, number][] = [['Lucas', 25], ['Pedro', 30]] #Criando um array de tuplas
const tuplaUsuario: [string, number] = ['Lucas', 25] #Criando uma tupla √∫nica

  # Se tentarmos alterar algum dos dados, somente ir√° ser poss√≠vel alterar para o tipo espec√≠fico, por exemplo tuplaUsuario[0] = "Junior"
se tentarmos colocar um number, ele ir√° gerar um erro de type, e se tentarmos colocar mais do que a quantidade passada, ele ir√° gerar erro de quantidade!

```
## Exercic√≠o para praticarmos a sintaxe de listas:
-  Crie arrays para armazenar cada tipo de dado, um de string, number e boolean;
- Crie um array vazio onde iremos ter uma fun√ß√£o respons√°vel por adicionar um elemento nesse array;
- Crie um array que possa armazenar n√∫meros OU strings, mas nunca booleanos;

‚û°Ô∏è ## Tipagem de objetos em Typescript:
**O que s√£o objetos em JS? Objetos em Javascript √© a forma em que conseguimos montar uma estrutura com caracter√≠sticas pr√≥prias, por exemplo
colocando campos como nome, idade, turma. Assim tornando o que antes tinhamos no array a ''bagun√ßa'' de informa√ß√µes, agora temos algo organizado.**

‚û°Ô∏è## OBJETOS NO TYPESCRIPT(Interfaces):
**No TypeScript, podemos criar Interfaces para definir um 'contrato' ou a 'forma' exata que um objeto deve possuir.
Esse contrato garante que qualquer objeto que utilize a interface tenha as propriedades (e os tipos delas) e os m√©todos (fun√ß√µes) que n√≥s definimos. Podemos deixar essas propriedades como obrigat√≥rias, opcionais ou somente leitura.**

```javascript
interface Usuario {
	nome: string
	idade: number
	turma: string
	dataNascimento?: string

	saudar(mensagem: string): void;
}

const usuarioNovo: Usuario = {
	#apertando ctrl + espa√ßo os campos aparecem automaticamente
	nome: "Lucas",
	idade: 25,
	turma: "b",
	saudar(mensagem: string):void{
		console.log(`Ol√° ${this.nome}, Mensagem: ${mensagem}`)

usuarioNovo.saudar("Bem vindo")
	#Se colocarmos algum dos campos com tipos diferentes dos solicitados, o TypeScript ir√° gerar um erro de assinaliza√ß√£o de tipo.
}
```

**Podemos tamb√©m ter uma lista de interfaces, por exemplo para criarmos um sistema onde iremos armazenar informa√ß√µes sobre diversos usu√°rios, nesse caso gostariamos de criar uma lista para armazenar essa informa√ß√µes, correto?**

```javascript
interface Contato{
	tipo: "email" | "instagram" | "telefone"
	valor: string
}
interface Usuario{
	nome: string
	idade: number
	contatos: Contato[]
	}

const listaUsuarios: Usuario[] = [
	{ #ctrl + barra ir√° automaticamente mostrar os campos que iremos ter
			nome: "Lucas",
			idade: 25,
			contatos: [
				{"tipo": "email", "valor": "fulano@gmail.com"},
				{"tipo": "telefone", "valor": "fulano@gmail.com"}]
		},
		{ #ctrl + barra ir√° automaticamente mostrar os campos que iremos ter
			nome: "Nay",
			idade: 26,
			contatos: [
				{"tipo": "email", "valor": "fulano@gmail.com"},
				{"tipo": "telefone", "valor": "fulano@gmail.com"}]
		},
]

```

##Dessa forma podemos criar uma lista com diversos usu√°rios e informa√ß√µes pertinentes aos mesmos, e at√© mesmo aplicar um la√ßo for por exemplo para podermos coletar informa√ß√µes ou utilizar por exemplo m√©todos como o saudar().

---

## üìö Dicas de Aprendizado
- Explore e teste livremente seu c√≥digo.  
- Pergunte ‚Äúpor qu√™?‚Äù para entender a l√≥gica.  
- Revise e ensine a algu√©m (√≥tima forma de aprender).  
- Pratique! Quanto mais exerc√≠cios, mais natural ser√° programar.  

---

